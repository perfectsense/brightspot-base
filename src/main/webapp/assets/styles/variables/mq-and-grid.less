// Here we will setup some media query variables that can be used throughout our individual LESS files
// and also call out a few of the Bootstrap variables that define the grid. These are the ones that are most
// likely to be changed per site, so we go ahead and pull them out in our own variables


// === Media Queries ===

// Anything under @screen-xs-min screen width is the xs breakpoint. Since we are mobile first, this is the default,
// and is used for mobile phones in portrait mode. In most cases, we will not use this breakpoint, as anything
// that is xs and sm will look the same or very very similar
@screen-xs-min:         480px;

// Anything between @screen-xs-min and @screen-sm-min is the sm breakpoint. This is the phablet and also landscape
// breakpoint for mobile devices specifically, but basically anything sm and under is "mobile"
@screen-sm-min:         768px;

// Once we cross @screen-sm-min we are in desktop territory. This is your "standard desktop" site
@screen-md-min:         992px;

// If we have any extra columns, or extra items we might expand or show on a super large screen, we will use
// this screen size to trigger that
@screen-lg-min:         1200px;

// the maxes are easy, minus 1
@screen-xs-max:              (@screen-sm-min - 1);
@screen-sm-max:              (@screen-md-min - 1);
@screen-md-max:              (@screen-lg-min - 1);

// Here are some helper media queries that allow you to write shorthand LESS throughout elements/components/pages
// Best practice should be to write your original styles for the xsmall screen and allow your items to scale as much
// as possible. Then if you need to add extra styles because of the wider screens, add in extra items or code in the
// expanstion through these three media queries. Note that these do not have max widths, so they scale
// If once you get to "small" screen, your component looks the same, you don't need further breakpoints. Just define
// the component using the @mq-sm breakpoint and it will look like that for all the bigger breakpoints
@mq-sm:                 ~"only screen and (min-width: @{screen-sm-min})";
@mq-md:                 ~"only screen and (min-width: @{screen-md-min})";
@mq-lg:                 ~"only screen and (min-width: @{screen-lg-min})";

// There are instances where we will need to specify handling only in certain breakpoints. Rather than being the best
// practice, this should be the exception case. These helpers will give you the ability to target only specific
// screen sizes and nothing else
@mq-only-xs:            ~"only screen and (max-width: @{screen-xs-max})";
@mq-only-sm:            ~"only screen and (min-width: @{screen-sm-min}) and (max-width: @{screen-sm-max})";
@mq-only-md:            ~"only screen and (min-width: @{screen-md-min}) and (max-width: @{screen-md-max})";
@mq-only-lg:            ~"only screen and (min-width: @{screen-lg-min})";


// === Grid ===

@grid-columns:              12;

// Padding between columns. Gets divided in half for the left and right.
// Sometimes, we want mobile spacing to be a bit bigger because the screen edge
@grid-gutter-width-xs:      @space;
@grid-gutter-width:         @space;


// Small screen / tablet site width
// This is between @screen-sm-min and @screen-md-min widths
@container-sm:      (720px + @grid-gutter-width);

// Medium screen / desktop
// This is between @screen-md-min and @screen-lg-min widths
@container-md:     (940px + @grid-gutter-width);

// Large screen / wide desktop
// If you would like to eliminate this because the designs do not warrant it, just change this to the @container-desktop value
// @container-large-desktop:      (@container-desktop + @grid-gutter-width);
@container-lg: (1140px + @grid-gutter-width);
