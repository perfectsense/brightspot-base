/**
 * Our Main CSS file
 */

// Grab the base boostrap variables. These will include some base site variables which we can then overwrite with our own
@import (reference) "bower/bootstrap/variables";

// This lets us use the bootstrap mixins if we would like to
@import (reference) "bower/bootstrap/mixins";

// We will "reference" the bootstrap grid. This lets us use these classes in our own CSS to mixin the bootstrap grid classes
// As a best practice, as long as we do not have a complicated grid that we need to use, we don't want the full Bootstrap grid LESS
// but instead create some semantic grid classes for ourselves using bootstrap mixins.
// Of course, if we will have lot of complicated grids in our site, we can just compile this in and use in the DOM or extend
@import (reference) "bower/bootstrap/grid.less";

// For buttons, since we do not need all the kinds Bootstrap has, we can make our own, but leverage their .btn mixins
@import (reference) "bower/bootstrap/buttons.less";

// Now we bring in our own variables. These will be new variables and overrides to any of the default boostrap ones we do not like
@import (reference) "variables/variables.less";

// This brings in our mixins
@import (reference) "mixins/mixins.less";

// We will start the compiled CSSS by bringing in the bootstrap normalize reset
@import "bower/bootstrap/normalize.less";

// And using Bootstrap scaffolding. This has a couple of extra helpers in it that aren't true "scaffolding" like img thumbnails, but that's ok
@import "bower/bootstrap/scaffolding.less";

// When bringing in Bootstrap styles, we can do it one of two ways. Referencing it as above, only compiles when its used as a mixin
// For items such as utilities, or other lightweight choices, we can go ahead and pre-compile, so we can use the classes straight in our DOM
@import "bower/bootstrap/utilities.less";

// importing base bsp-carousel styles
@import (inline) "bower/bsp-carousel/bsp-carousel.css";
// this should really be moved into bsp-carousel.css above, but I'm leaving it here for now for fast development
@import "components/move-to-bsp-carousel.less";

// importing base bsp-tabber styles
@import (inline) "bower/bsp-tabber.css";

// These are elements. Some of these correspond to DOM elements, others are small building blocks that components or parts of components can extend
@import "elements/bsp-buttons.less";
@import "elements/bsp-component.less";
@import "elements/bsp-grid.less";
@import "elements/bsp-icons.less";
@import "elements/bsp-image.less";
@import "elements/bsp-lists.less";
@import "elements/bsp-typography.less";
@import "elements/bsp-vertical-center.less";

// Components should be ties into CMS components as closely as possible. It would be ideal to maintain a 1:1 relationship of components renderers to
// components LESS files so they are easy to identify, find, and modify
@import "components/bsp-article.less";
@import "components/bsp-dropdown.less";
@import "components/bsp-site-footer.less";
@import "components/gallery.less";
@import "components/bsp-bio.less";
@import "components/bsp-gallery-module.less";
@import "components/bsp-image-promo.less";
@import "components/bsp-list-promo.less";
@import "components/bsp-list-promo-modifiers.less";
@import "components/bsp-meta-data.less";
@import "components/bsp-page-title.less";
@import "components/bsp-section-title.less";
@import "components/bsp-share-links.less";
@import "components/bsp-site-header.less";
@import "components/bsp-tabber.less";
@import "components/bsp-table.less";
@import "components/bsp-tags.less";