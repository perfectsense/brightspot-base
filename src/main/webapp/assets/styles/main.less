/**
 * Our Main CSS file
 */

// Grab the base boostrap variables. These will include some base site variables which we can then overwrite with our own
@import (reference) "bower/bootstrap/variables";

// This lets us use the bootstrap mixins if we would like to
@import (reference) "bower/bootstrap/mixins";

// We will "reference" the bootstrap grid. This lets us use these classes in our own CSS to mixin the bootstrap grid classes
// As a best practice, as long as we do not have a complicated grid that we need to use, we don't want the full Bootstrap grid LESS
// but instead create some semantic grid classes for ourselves using bootstrap mixins.
// Of course, if we will have lot of complicated grids in our site, we can just compile this in and use in the DOM or extend
@import (reference) "bower/bootstrap/grid";

// For buttons, since we do not need all the kinds Bootstrap has, we can make our own, but leverage their .btn mixins
@import (reference) "bower/bootstrap/buttons";

// Now we bring in our own variables. These will be new variables and overrides to any of the default boostrap ones we do not like
@import (reference) "variables/variables";

// This brings in our mixins
@import (reference) "mixins/mixins";

// We will start the compiled CSSS by bringing in the bootstrap normalize reset
@import "bower/bootstrap/normalize";

// And using Bootstrap scaffolding. This has a couple of extra helpers in it that aren't true "scaffolding" like img thumbnails, but that's ok
@import "bower/bootstrap/scaffolding";

// When bringing in Bootstrap styles, we can do it one of two ways. Referencing it as above, only compiles when its used as a mixin
// For items such as utilities, or other lightweight choices, we can go ahead and pre-compile, so we can use the classes straight in our DOM
@import "bower/bootstrap/utilities";

// importing base bsp-carousel styles
@import (inline) "bower/bsp-carousel/bsp-carousel.css";

// These are elements. Some of these correspond to DOM elements, others are small building blocks that objects or parts of objects can extend
@import "elements/buttons";
@import "elements/component";
@import "elements/grid";
@import "elements/icons";
@import "elements/lists";
@import "elements/typography";
@import "elements/vertical-center";

// Objects should be ties into CMS objects as closely as possible. It would be ideal to maintain a 1:1 relationship of object renderers to
// object LESS files so they are easy to identify, find, and modify
@import "objects/dropdown";
@import "objects/footer";
@import "objects/gallery";
@import "objects/gallery-module";
@import "objects/header";
@import "objects/img-promo";
@import "objects/list-promo";
@import "objects/page-title";
@import "objects/share-links";
