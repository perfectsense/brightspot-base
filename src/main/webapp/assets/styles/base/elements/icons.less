/**
 * We have 2 ways of doing icons.
 *
 * Method 1 - has a custom icon class (.icon) and you have to manually specify which icons you use
 * Method 2 - if we have custom icons add your custom font and add custom icon definitions on top (most work, most performant)
 *
 */


/**
 * Method #1
 *
 * This is our custom implementation of font-awesome. Here we will only include the font awesome icons that we
 * need. This way we can cut down on the amount of CSS compiled in, especially if we are only using a few of the
 * Font Awesome icons in our code. This can cut down on up to 25kb as we are not compiling the FA classes that we will not
 * use. This still pulls in the heavy font file though, but that is heavily cached.
 */


// We write out the icons we are using at the top of the LESS file for easy access

// instead of importing fontawesome/icons.less which includes all the icons that can be used, we will manually
// write out the ones we need here. We can just drop these classes into the DOM or even better, extend them
.icon-angle-down:before {
    content: @fa-var-angle-down;
}
.icon-angle-left:before {
    content: @fa-var-angle-left;
}
.icon-angle-right:before {
    content: @fa-var-angle-right;
}
.icon-angle-up:before {
    content: @fa-var-angle-up;
}
.icon-bars:before {
    content: @fa-var-bars;
}
.icon-caret-down:before {
    content: @fa-var-caret-down;
}
.icon-close:before {
    content: @fa-var-close;
}
.icon-comment:before {
    content: @fa-var-comment;
}
.icon-external-link:before {
    content: @fa-var-external-link;
}
.icon-facebook {
    color: @color-facebook;
    &:before {
        content: @fa-var-facebook;
    }
}
.icon-google {
    &:before {
        content: @fa-var-google;
    }
}
.icon-google-plus {
    &:before {
        content: @fa-var-google-plus;
    }
}
.icon-info-circle:before {
    content: @fa-var-info-circle;
}
.icon-instagram {
    color: @color-instagram;
    &:before {
        content: @fa-var-instagram;
    }
}
.icon-linkedin {
    color: @color-linkedin;
    &:before {
        content: @fa-var-linkedin;
    }
}
.icon-pinterest {
    color: @color-pinterest;
    &:before {
        content: @fa-var-pinterest;
    }
}
.icon-retweet:before {
    content: @fa-var-retweet;
}
.icon-search:before {
    content: @fa-var-search;
}
.icon-share:before {
    content: @fa-var-share;
}
.icon-star:before {
    content: @fa-var-star;
}
.icon-th-large:before {
    content: @fa-var-th-large;
}
.icon-thumbs-up:before {
    content: @fa-var-thumbs-up;
}
.icon-thumbs-down:before {
    content: @fa-var-thumbs-down;
}
.icon-tumblr {
    color: @color-tumblr;
    &:before {
        content: @fa-var-tumblr;
    }
}
.icon-twitter {
    color: @color-twitter;
    &:before {
        content: @fa-var-twitter;
    }
}


// we will import the variables and mixins as reference so we can use them
@import (reference) "../../bower/fontawesome/variables.less";
@import (reference) "../../bower/fontawesome/mixins.less";

// we can override the base font awesome prefix to give our icon class a custom name here if we want
// instead of "fa", like "icon" or "client-namespace-icon".
// use this as your class name in your HTML ex: <i class="icon icon-bed">
@fa-css-prefix: icon;

// we pull in the default font-awesome font path, as well as the core definition
@import "../../bower/fontawesome/path.less";

// we drop in our named icon class here using the fa-icon mixin. Allows us to also do extends for semantic class names if that's what we want
// if we just use the variable here instead of the hardcoded name, we cannot do extends
.icon {
  .fa-icon()
}


/**
 * Method #3
 *
 * The third method can be the most efficient, and should also be used if you have custom fonts for your project.
 * If the design team will be providing custom icons it would be best to use a service like icomoon.io to create a custom
 * font file that is based on Font Awesome. This will allow you to use as many of the Font Awesome icons as design wants
 * but not compile into the font file the ones that are not needed, and also compile any extras as well
 */




// We write out the icons we are using at the top of the LESS file for easy access

// instead of importing fontawesome/icons.less which includes all the icons that can be used, we will manually
// write out the ones we need here.
/*
.icon-glass:before {
    content: @fa-var-glass;
}
.icon-futbol-o:before {
    content: @fa-var-futbol-o;
}
.icon-twitter:before {
    content: @fa-var-twitter-square;
}
.icon-facebook:before {
    content: @fa-var-facebook-square;
}
.icon-google:before {
    content: @fa-var-google-plus-square;
}
.icon-linkedin:before {
    content: @fa-var-linkedin-square;
}
.icon-pinterest:before {
    content: @fa-var-pinterest-square;
}

// for any custom icons, we have to specify the actual content values, since there are no variables for us to use
.icon-custom-one:before {
    content: "\f1e3";
}


// we will import the variables and mixins as reference so we can use them
@import (reference) "../bower/fontawesome/variables.less";
@import (reference) "../bower/fontawesome/mixins.less";

// we can override the base font awesome prefix to give our icon class a custom name here if we want
// instead of "fa", like "icon" or "client-namespace-icon".
// use this as your class name in your HTML ex: <i class="icon icon-bed">
@fa-css-prefix: icon;

// we pull in our custom font file. Place your custom font file in the assets/fonts directory
// for each version of the font file that you upload, place a new cachebusting parameter
@font-face {
    font-family: 'icomoon';
    src:url('../fonts/icomoon.eot?-8ootkx');
    src:url('../fonts/icomoon.eot?#iefix-8ootkx') format('embedded-opentype'),
        url('../fonts/icomoon.woff?-8ootkx') format('woff'),
        url('../fonts/icomoon.ttf?-8ootkx') format('truetype'),
        url('../fonts/icomoon.svg?-8ootkx#icomoon') format('svg');
    font-weight: normal;
    font-style: normal;
}

// we create our custom font icon declaratio here. Not the "CustomFontName" in the font declaration
.icon {
  display: inline-block;
  font: normal normal normal @fa-font-size-base/1 icomoon; // shortening font declaration
  font-size: inherit; // can't have font-size inherit on line above, so need to override
  text-rendering: auto; // optimizelegibility throws things off #1094
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  transform: translate(0, 0); // ensures no half-pixel rendering in firefox
}
*/

