// ----------------------------------------------------------------------------
// Grid variables for columns, container and gutters
// ----------------------------------------------------------------------------

/**
 * We define how many grid columns we want. Each container has this many columns as options for content. We can stack grids within
 * columns of other grids to create an almost infinite number of combinations.
 */
@grid-columns:              12;

/**
 * Padding between columns. Gets divided in half for the left and right site gutter
 * We also offer up a mobile gutter spacing as a separate variable because we want mobile spacing to be a bit bigger because the screen edge
 */
@grid-gutter-width-xs:      @space;
@grid-gutter-width:         @space;

/**
 * This is the padding for the top and bottom of the site. This will be under the header and above the footer
 */
@site-top-and-bottom-space: @space-double;

/**
 * These define the width of the site that gets divided into the grid. For xs screen sizes, we are 100% width
 *
 * Small screen / tablet site width
 * This is the width of the site between @screen-sm-min and @screen-md-min widths
 */
@container-sm: (720px + @grid-gutter-width);

/**
 * Medium screen / desktop
 * This is the width of the site between @screen-md-min and @screen-lg-min widths
 */
@container-md: (940px + @grid-gutter-width);

/**
 * Large screen / wide desktop
 * If you would like to eliminate this because the designs do not warrant it, just change this to the @container-md value
 * @container-large-desktop:      (@container-md + @grid-gutter-width);
 */
@container-lg: (1140px + @grid-gutter-width);

// ----------------------------------------------------------------------------
// Media query variables and shortcuts
// ----------------------------------------------------------------------------

/**
 * Screen size minimums. These values define our grid system and our responsive breakpoints
 *
 * Anything under @screen-xs-min screen width is the xs breakpoint. Since we are mobile first, this is the default,
 * and is used for mobile phones for both landscape and portrait
 */
@screen-xs-min:         320px;

/**
 * Anything between @screen-sm-min and @screen-sm-max is the sm breakpoint. This is for desktop browsers will smaller
 * screens/windows and for portrait tablets.
 */
@screen-sm-min:         768px;

/**
 * Once we cross @screen-md-min we are in "desktop" territory, but we also use this for landscape tablets
 */
@screen-md-min:         992px;

/**
 * If we have any extra columns, or extra items we might expand or show on a larger screen, we will use this screen size to trigger that
 */
@screen-lg-min:         1200px;

// The maxes are used in our helper functions. We name these with a _ which keeps them out of the automated styleguide documentation
@_screen-xs-max:              (@screen-sm-min - 1);
@_screen-sm-max:              (@screen-md-min - 1);
@_screen-md-max:              (@screen-lg-min - 1);


/**
 * Here are some helper media queries that allow you to write shorthand LESS throughout elements/components/pages
 *
 * Best practice should be to write your original styles for the xsmall screen and allow your items to scale as much
 * as possible. Then if you need to add extra styles because of the wider screens, add in extra items or code in the
 * expanstion through these three media queries. Note that these do not have max widths, so they scale
 * If once you get to "small" screen, your component looks the same, you don't need further breakpoints. Just define
 * the component using the @mq-sm breakpoint and it will look like that for all the bigger breakpoints
 */
@mq-sm:                 ~"only screen and (min-width: @{screen-sm-min})";
@mq-md:                 ~"only screen and (min-width: @{screen-md-min})";
@mq-lg:                 ~"only screen and (min-width: @{screen-lg-min})";

/**
 * There are instances where we will need to specify handling only in certain breakpoints. Rather than being the best
 * practice, this should be the exception case. These helpers will give you the ability to target only specific
 * screen sizes and nothing else.
 */
@mq-only-xs:            ~"only screen and (max-width: @{_screen-xs-max})";
@mq-only-sm:            ~"only screen and (min-width: @{screen-sm-min}) and (max-width: @{_screen-sm-max})";
@mq-only-md:            ~"only screen and (min-width: @{screen-md-min}) and (max-width: @{_screen-md-max})";
@mq-only-lg:            ~"only screen and (min-width: @{screen-lg-min})";
